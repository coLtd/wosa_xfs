/// <reference path="xfsapi.ts"/>

/**
 * IDC 命令
 * @namespace
*/
namespace IDC {
    const WFS_SERVICE_CLASS_IDC              = (2);
    const WFS_SERVICE_CLASS_NAME_IDC         = "IDC";
    const WFS_SERVICE_CLASS_VERSION_IDC      = (0x1E03); /* Version 3.30 */
    const IDC_SERVICE_OFFSET                 = (WFS_SERVICE_CLASS_IDC * 100);

    /* IDC Info Commands */
    export enum INF {
        WFS_INF_IDC_STATUS                  = (IDC_SERVICE_OFFSET + 1),
        WFS_INF_IDC_CAPABILITIES            = (IDC_SERVICE_OFFSET + 2),
        WFS_INF_IDC_FORM_LIST               = (IDC_SERVICE_OFFSET + 3),
        WFS_INF_IDC_QUERY_FORM              = (IDC_SERVICE_OFFSET + 4),
        WFS_INF_IDC_QUERY_IFM_IDENTIFIER    = (IDC_SERVICE_OFFSET + 5),
        WFS_INF_IDC_EMVCLESS_QUERY_APPLICATIONS = (IDC_SERVICE_OFFSET + 6)
    }

    /* IDC Execute Commands */
    export enum CMD {
        WFS_CMD_IDC_READ_TRACK             = (IDC_SERVICE_OFFSET + 1),
        WFS_CMD_IDC_WRITE_TRACK            = (IDC_SERVICE_OFFSET + 2),
        WFS_CMD_IDC_EJECT_CARD             = (IDC_SERVICE_OFFSET + 3),
        WFS_CMD_IDC_RETAIN_CARD            = (IDC_SERVICE_OFFSET + 4),
        WFS_CMD_IDC_RESET_COUNT            = (IDC_SERVICE_OFFSET + 5),
        WFS_CMD_IDC_SETKEY                 = (IDC_SERVICE_OFFSET + 6),
        WFS_CMD_IDC_READ_RAW_DATA          = (IDC_SERVICE_OFFSET + 7),
        WFS_CMD_IDC_WRITE_RAW_DATA         = (IDC_SERVICE_OFFSET + 8),
        WFS_CMD_IDC_CHIP_IO                = (IDC_SERVICE_OFFSET + 9),
        WFS_CMD_IDC_RESET                  = (IDC_SERVICE_OFFSET + 10),
        WFS_CMD_IDC_CHIP_POWER             = (IDC_SERVICE_OFFSET + 11),
        WFS_CMD_IDC_PARSE_DATA             = (IDC_SERVICE_OFFSET + 12),
        WFS_CMD_IDC_SET_GUIDANCE_LIGHT     = (IDC_SERVICE_OFFSET + 13),
        WFS_CMD_IDC_POWER_SAVE_CONTROL     = (IDC_SERVICE_OFFSET + 14),
        WFS_CMD_IDC_PARK_CARD              = (IDC_SERVICE_OFFSET + 15),
        WFS_CMD_IDC_EMVCLESS_CONFIGURE     = (IDC_SERVICE_OFFSET + 16),
        WFS_CMD_IDC_EMVCLESS_PERFORM_TRANSACTION= (IDC_SERVICE_OFFSET + 17),
        WFS_CMD_IDC_EMVCLESS_ISSUERUPDATE  = (IDC_SERVICE_OFFSET + 18),
        WFS_CMD_IDC_SYNCHRONIZE_COMMAND    = (IDC_SERVICE_OFFSET + 19)
    }

    /* IDC Messages */
    export enum EVENT {
        WFS_EXEE_IDC_INVALIDTRACKDATA      = (IDC_SERVICE_OFFSET + 1),
        WFS_EXEE_IDC_MEDIAINSERTED         = (IDC_SERVICE_OFFSET + 3),
        WFS_SRVE_IDC_MEDIAREMOVED          = (IDC_SERVICE_OFFSET + 4),
        WFS_SRVE_IDC_CARDACTION            = (IDC_SERVICE_OFFSET + 5),
        WFS_USRE_IDC_RETAINBINTHRESHOLD    = (IDC_SERVICE_OFFSET + 6),
        WFS_EXEE_IDC_INVALIDMEDIA          = (IDC_SERVICE_OFFSET + 7),
        WFS_EXEE_IDC_MEDIARETAINED         = (IDC_SERVICE_OFFSET + 8),
        WFS_SRVE_IDC_MEDIADETECTED         = (IDC_SERVICE_OFFSET + 9),
        WFS_SRVE_IDC_RETAINBININSERTED     = (IDC_SERVICE_OFFSET + 10),
        WFS_SRVE_IDC_RETAINBINREMOVED      = (IDC_SERVICE_OFFSET + 11),
        WFS_EXEE_IDC_INSERTCARD            = (IDC_SERVICE_OFFSET + 12),
        WFS_SRVE_IDC_DEVICEPOSITION        = (IDC_SERVICE_OFFSET + 13),
        WFS_SRVE_IDC_POWER_SAVE_CHANGE     = (IDC_SERVICE_OFFSET + 14),
        WFS_EXEE_IDC_TRACKDETECTED         = (IDC_SERVICE_OFFSET + 15),
        WFS_EXEE_IDC_EMVCLESSREADSTATUS    = (IDC_SERVICE_OFFSET + 16)
    }
}